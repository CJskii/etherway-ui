generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  ethereumAddress     String              @id
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  totalPoints         Int                 @default(0)
  inviteLink          String              @unique
  invitedById         String?
  leaderboardRank     Int?
  discordHandle       String?             @unique
  githubHandle        String?             @unique
  twitterHandle       String?             @unique
  currentRewardDay    Int                 @default(1)
  inviteCount         Int                 @default(0)
  lastRewardClaimedAt DateTime?
  email               String?             @unique
  isOnWaitlist        Boolean             @default(false)
  isSubscribed        Boolean             @default(false)
  bridges             Bridges[]
  interactions        Interactions[]
  mints               Mints[]
  streaks             Streaks[]
  invitedBy           User?               @relation("ReferralRelation", fields: [invitedById], references: [ethereumAddress])
  referredUsers       User[]              @relation("ReferralRelation")
  dailyRewards        UserDailyReward[]
  VerificationToken   VerificationToken[]

  @@index([totalPoints])
}

model Mints {
  id              Int      @id @default(autoincrement())
  ethereumAddress String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  count           Int      @default(0)
  user            User     @relation(fields: [ethereumAddress], references: [ethereumAddress])
}

model Bridges {
  id              Int      @id @default(autoincrement())
  ethereumAddress String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  count           Int      @default(0)
  layerzeroCount  Int      @default(0)
  wormholeCount   Int      @default(0)
  user            User     @relation(fields: [ethereumAddress], references: [ethereumAddress])
}

model Interactions {
  id              Int      @id @default(autoincrement())
  ethereumAddress String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  count           Int      @default(0)
  user            User     @relation(fields: [ethereumAddress], references: [ethereumAddress])
}

model Streaks {
  id              Int       @id @default(autoincrement())
  ethereumAddress String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  startDate       DateTime
  endDate         DateTime?
  currentStreak   Int       @default(0)
  user            User      @relation(fields: [ethereumAddress], references: [ethereumAddress])
}

model DailyReward {
  id          Int               @id @default(autoincrement())
  day         Int               @unique
  reward      String
  description String
  points      Int
  users       UserDailyReward[]
}

model UserDailyReward {
  id            Int         @id @default(autoincrement())
  userId        String
  dailyRewardId Int
  claimedAt     DateTime    @default(now())
  dailyReward   DailyReward @relation(fields: [dailyRewardId], references: [id])
  user          User        @relation(fields: [userId], references: [ethereumAddress])
}

model VerificationToken {
  id         Int       @id @default(autoincrement())
  token      String    @unique
  identifier String
  expires    DateTime? @db.Timestamptz(6)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime
  user_email String
  User       User      @relation(fields: [user_email], references: [email])

  @@unique([identifier, token])
}

model DiscordEvent {
  id             Int      @id @default(autoincrement())
  discordEventId String   @unique
  scheduledStart DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime
  name           String?
}

model DiscordSupportTicket {
  id            Int                      @id @default(autoincrement())
  channelId     String?
  guildId       String
  type          DiscordSupportTicketType
  discordUserId String
  createdAt     DateTime                 @default(now()) @db.Timestamptz(6)
  closedAt      DateTime?                @db.Timestamptz(6)
  DiscordUser   DiscordUser              @relation(fields: [discordUserId], references: [id])
}

model DiscordUser {
  id                   String                 @id
  username             String
  createdAt            DateTime               @default(now()) @db.Timestamptz(6)
  updatedAt            DateTime               @db.Timestamptz(6)
  DiscordSupportTicket DiscordSupportTicket[]
  GmStreak             GmStreak?
  GnStreak             GnStreak?
}

model GmStreak {
  id            Int         @id @default(autoincrement())
  streak        Int         @default(0)
  highestStreak Int         @default(0)
  totalCount    Int         @default(0)
  lastGmDate    DateTime    @db.Timestamptz(6)
  discordUserId String      @unique
  DiscordUser   DiscordUser @relation(fields: [discordUserId], references: [id])
}

model GnStreak {
  id            Int         @id @default(autoincrement())
  streak        Int         @default(0)
  highestStreak Int         @default(0)
  totalCount    Int         @default(0)
  lastGnDate    DateTime    @db.Timestamptz(6)
  discordUserId String      @unique
  DiscordUser   DiscordUser @relation(fields: [discordUserId], references: [id])
}

enum DiscordSupportTicketType {
  VERIFICATION
  PARTNERSHIPS
  BUGS
  SCAM
  OTHER
}
